
These are all the commands used to set up this project.
Some can be executed automatically or manually, i am trying them manually first
to make sure they work


#Building the docker container
docker build -t ft_server .

#Running the docker container from the docker file
docker run -it -p 80:80 -p 443:443 ft_server

#Running the docker container from the docker file with access to the shell
docker run -it -p 80:80 -p 443:443 ft_server /bin/sh


#Run the debian:buster image directly from the source (everything else done manually)
docker run -p80:80 -it debian:buster /bin/sh
	#this gets you in the debian shell
exit #to get out of the debian shell back to your own


#First things first
apt-get update
apt-get upgrade -y
	# should we be using apt-get ?
L'option -y permet de r√©pondre oui par avance aux demandes de confirmations

#Install Nginx
apt-get -y install nginx

#Run Nginx (allows you to see the default page at localhost:80)
service nginx start
	#stop to end ?
sleep infinity	#necessary ?

#Nginx config file is here:
etc/nginx/sites-available



#Install PHP
apt-get install -y php7.3 php7.3-fpm php7.3-mysql php-common php7.3-cli \
php7.3-common php7.3-json php7.3-opcache php7.3-readline
	#watch out for tab in middle of above line, fucks execution up.

#Start PHP
service php7.3-fpm start

Ajouter index.php dans les configurations de Nginx.

#Can now make a test.php file to see if it's up...
#You may want to install vim...
apt-get -y install vim

# I put a test.php file containing: "<?php phpinfo();" in /var/www/html


# Testing if installing ssl makes php work...
# Didn't change anything
#Install SSL
apt-get install openssl

#More SSL stuff, not sure what it does but seems useful
openssl req -newkey rsa:4096 -x509 -sha256 -days 365 -nodes -out /etc/nginx/ssl/localhost.pem -keyout /etc/nginx/ssl/localhost.key -subj "/C=FR/ST=Paris/L=Paris/O=42 School/OU=emma/CN=localhost"

#Configure Nginx to use SSL
ssl_certificate /etc/nginx/ssl/localhost.pem;
ssl_certificate_key /etc/nginx/ssl/localhost.key;
	#in the config file


# Instal Maria.db
apt-get install -y mariadb-server mariadb-client
#start mariadb
service mysql start
#check DB
mariadb
	#now in SQL shell
SHOW DATABASES;
exit

# Install and configure phpmyadmin

#something about allowing it to connect to DBs
apt install -y php-json php-mbstring
#now we get phpmyadmin, just in english tho
wget https://files.phpmyadmin.net/phpMyAdmin/4.9.0.1/phpMyAdmin-4.9.0.1-english.tar.gz
#extract the file
tar -zxvf phpMyAdmin-4.9.0.1-english.tar.gz
#move it someplace useful
mv phpMyAdmin-4.9.0.1-english /usr/share/phpMyAdmin
#copying the sample config file
cp -pr /usr/share/phpMyAdmin/config.sample.inc.php /usr/share/phpMyAdmin/config.inc.php
	#to be edited, in final version will already have a proper one in srcs
#need to update the "Blowfish secret" line, see the docs
#there is a website that generates new passphrases.
#uncomment a bunch of stuff, will want a copy of all that soon

#something about creating tables
mysql < /usr/share/phpMyAdmin/sql/create_tables.sql -u root -p
	#asks for a password, i just hit enter ??? seems to have worked...
#log into Mariadb
mysql -u root -p
	#also asks for password, i hit enter now in SQL shell
#did some things in the shell about priviledges...
GRANT ALL PRIVILEGES ON phpmyadmin.* TO 'erlazo'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
#now exit

#now vim into
/etc/nginx/conf.d/phpMyAdmin.conf
	# will create a virtual host config file
	# copy and pasted into that file the whole they they said (we'll see if that works)

#create a tmp file and update permissions
mkdir /usr/share/phpMyAdmin/tmp
chmod 777 /usr/share/phpMyAdmin/tmp
#now set ownership
chown -R www-data:www-data /usr/share/phpMyAdmin

#now need to restart nginx and php

#now go back into SQL shell to create a DB
CREATE DATABASE app_db;
GRANT ALL PRIVILEGES ON app_db.* TO 'erlazo'@'localhost' IDENTIFIED BY 'password';
FLUSH PRIVILEGES;
exit


What we do at the moment:
Everything gets installed with the Dockerfile, but still need to run
the docker container with /bin/sh to be get into the debian shell
(maybe could do docker exec name /bin/sh ...)
Then i modify the nginx config file
create the test.php file
start nginx
start php

now have access to the default nginx site at localhost
and the php info at localhost/test.php

install and start mariadb
can check if worked with command: mariadb
will put you in the sql shell
then SHOW DATABAES; will do just that
then exit









